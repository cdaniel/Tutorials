/*
* generated by Xtext
*/
grammar InternalInsurance;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.InsuranceGrammarAccess;

}

@parser::members {

 	private InsuranceGrammarAccess grammarAccess;
 	
    public InternalInsuranceParser(TokenStream input, InsuranceGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected InsuranceGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getProductsProductParserRuleCall_0()); 
	    }
		lv_products_0_0=ruleProduct		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"products",
        		lv_products_0_0, 
        		"Product");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleProduct
entryRuleProduct returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProductRule()); }
	 iv_ruleProduct=ruleProduct 
	 { $current=$iv_ruleProduct.current; } 
	 EOF 
;

// Rule Product
ruleProduct returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Produkt' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProductAccess().getProduktKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getProductAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProductRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProductAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='OPIS=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProductAccess().getOPISKeyword_3());
    }
(
(
		lv_description_4_0=RULE_STRING
		{
			newLeafNode(lv_description_4_0, grammarAccess.getProductAccess().getDescriptionSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProductRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_4_0, 
        		"STRING");
	    }

)
)	otherlv_5='SREDNIE ODSZKODOWANIE=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getProductAccess().getSREDNIEODSZKODOWANIEKeyword_5());
    }
(
(
		lv_avgDamages_6_0=RULE_INT
		{
			newLeafNode(lv_avgDamages_6_0, grammarAccess.getProductAccess().getAvgDamagesINTTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProductRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"avgDamages",
        		lv_avgDamages_6_0, 
        		"INT");
	    }

)
)	otherlv_7='CZESTOSC ZDARZEN NA 1000=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getProductAccess().getCZESTOSCZDARZENNA1000Keyword_7());
    }
(
(
		lv_occurrences_8_0=RULE_INT
		{
			newLeafNode(lv_occurrences_8_0, grammarAccess.getProductAccess().getOccurrencesINTTerminalRuleCall_8_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProductRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"occurrences",
        		lv_occurrences_8_0, 
        		"INT");
	    }

)
)	otherlv_9='OCZEKIWANY ZYSK (%)=' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getProductAccess().getOCZEKIWANYZYSKKeyword_9());
    }
(
(
		lv_earnings_10_0=RULE_INT
		{
			newLeafNode(lv_earnings_10_0, grammarAccess.getProductAccess().getEarningsINTTerminalRuleCall_10_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProductRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"earnings",
        		lv_earnings_10_0, 
        		"INT");
	    }

)
)	otherlv_11='KOSZT OBSLUGI (szt)=' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getProductAccess().getKOSZTOBSLUGISztKeyword_11());
    }
(
(
		lv_cost_12_0=RULE_INT
		{
			newLeafNode(lv_cost_12_0, grammarAccess.getProductAccess().getCostINTTerminalRuleCall_12_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProductRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"cost",
        		lv_cost_12_0, 
        		"INT");
	    }

)
)	otherlv_13='W SPRZEDAZY=' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getProductAccess().getWSPRZEDAZYKeyword_13());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProductAccess().getSellingYesNoParserRuleCall_14_0()); 
	    }
		lv_selling_14_0=ruleYesNo		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProductRule());
	        }
       		set(
       			$current, 
       			"selling",
        		lv_selling_14_0, 
        		"YesNo");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_15='POWIAZANE PRODUKTY=' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getProductAccess().getPOWIAZANEPRODUKTYKeyword_15_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProductRule());
	        }
        }
	otherlv_16=RULE_ID
	{
		newLeafNode(otherlv_16, grammarAccess.getProductAccess().getConnectedProductCrossReference_15_1_0()); 
	}

)
)*)?	otherlv_17='}' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getProductAccess().getRightCurlyBracketKeyword_16());
    }
)
;





// Entry rule entryRuleYesNo
entryRuleYesNo returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getYesNoRule()); } 
	 iv_ruleYesNo=ruleYesNo 
	 { $current=$iv_ruleYesNo.current.getText(); }  
	 EOF 
;

// Rule YesNo
ruleYesNo returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='TAK' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getYesNoAccess().getTAKKeyword_0()); 
    }

    |
	kw='NIE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getYesNoAccess().getNIEKeyword_1()); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


